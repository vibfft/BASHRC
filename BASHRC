# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    #PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    PS1=' \[\033[36m\]\w\[\033[m\] \$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
export CLICOLOR=1
export LSCOLORS=ExFxBxDxCxegedabagacad
export GOPATH=$HOME/go
export PATH=$GOPATH/bin:$PATH

# some more ls aliases
alias ls='ls -GFh --color'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias python='python3'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
function youtube {
  if [ $# -ne 2 ]
    then
      echo "Invalid argument; Usage: 'youtube <mp3/mp4> <youtube_url>'"
      return 1
  fi
  arg1=$1
  arg2=$2
  if [[ "$arg1" == "mp3" ]]; then
      echo "python3 /usr/local/bin/youtube-dl --extract-audio --audio-format $arg1 $arg2"
      python3 /usr/local/bin/youtube-dl --extract-audio --audio-format $arg1 $arg2
  elif [[ "$arg1" == "mp4" ]]; then
      echo "python3 /usr/local/bin/youtube-dl --recode-video $arg1 $arg2"
      python3 /usr/local/bin/youtube-dl --recode-video $arg1 $arg2
  fi
}

function youtube_mv {
  if [ $# -ne 1 ]
    then
      echo "Invalid argument; Usage: 'youtube_mv <file_name>'"
      return 1
  fi
  filename=$1
  echo "sudo mv $filename /mnt/c/Users/stephen"
  sudo mv $1 /mnt/c/Users/stephen
}

function pycharm {
  export DISPLAY=$(awk '/nameserver / {print $2; exit}' /etc/resolv.conf 2>/dev/null):0
  echo "DISPLAY => ${DISPLAY}\n"
  echo "Starting Pycharm Version 2020.2\n"
  ./pycharm-community-2020.2/bin/pycharm.sh
}

function intellij {
  export DISPLAY=$(awk '/nameserver / {print $2; exit}' /etc/resolv.conf 2>/dev/null):0
  echo "DISPLAY => ${DISPLAY}\n"
  echo "Starting Intellij Version 2020.2\n"
  ./idea-IC-202.6397.94/bin/idea.sh
}

function vscode {
  export DISPLAY=$(awk '/nameserver / {print $2; exit}' /etc/resolv.conf 2>/dev/null):0
  export DONT_PROMPT_WSL_INSTALL=1
  echo "DISPLAY => ${DISPLAY}\n"
  echo "Starting Visual Studio Code\n"
  ./VSCode-linux-x64/bin/code
}

function menu {
  #Black        0;30     Dark Gray     1;30
  #Red          0;31     Light Red     1;31
  #Green        0;32     Light Green   1;32
  #Brown/Orange 0;33     Yellow        1;33
  #Blue         0;34     Light Blue    1;34
  #Purple       0;35     Light Purple  1;35
  #Cyan         0;36     Light Cyan    1;36
  #Light Gray   0;37     White         1;37

  YLLW="\033[1;33m"
  CYAN="\033[0;36m"
  RED="\033[1;31m"
  GREEN="\033[1;32m"
  LBLUE="\033[1;34m"
  NC="\033[0m"  #NOCOLOR

  echo -e "${LBLUE}*********************************************************************************************${NC}"
  echo -e "Menu for ${GREEN}Essential Commands${NC}"
  echo -e "${LBLUE}*********************************************************************************************${NC}"
  echo -e "${GREEN}youtube    - Download youtube mp4 or mp3 from www.youtube.comi${NC}"
  echo -e "${GREEN}youtube_mv - Moves the downloaded youtube file from bash shell to Windows filesystem${NC}"
  echo -e "${GREEN}pycharm    - Start pycharm${NC}"
  echo -e "${GREEN}intellij   - Start intellij${NC}"
  echo -e "${GREEN}vscode     - Start Visual Studio Code${NC}"
  echo -e "${LBLUE}*********************************************************************************************${NC}"
}

/usr/bin/screenfetch
